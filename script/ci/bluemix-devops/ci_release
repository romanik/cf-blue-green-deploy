#!/bin/bash
set -e -x

dir=`dirname $0`
. $dir/ci_env

DRAFTINESS=false

# Create a git tag and push the tags

  if [ $DRY_RUN ]; then
    cmd_modifier="echo 'Would have run -- '"
    DRAFTINESS=true
  fi

git clone https://github.com/fsaintjacques/semver-tool
pushd semver-tool
  git checkout tags/1.2.1
popd

GIT_URL=`cat artefacts/.gitorigin`
GIT_HASH=`cat artefacts/.gitcommithash`

SECURED_GIT_URL=`echo $GIT_URL | sed -e "s,https://,https://bluemixgarage:$OAUTH_TOKEN@,g"`
mkdir prerelease
pushd prerelease
  git clone $SECURED_GIT_URL
  cd cf-blue-green-deploy
  git checkout $GIT_HASH

  version_to_release=`../../semver-tool/src/semver release`

  TAG=v${version_to_release}
  NAME="Version ${version_to_release}"
  # TODO it would, of course, be nicer not to hardcode the repo name, and we should be able to work it out
  REPO="bluemixgaragelondon/cf-blue-green-deploy"
  #TODO optional, release does it? git tag ${TAG}
  #${cmd_modifier} git push --tags

    # Upload the binaries to the git release

    # Create a git release using the tag

    description=\"`cat .releaseDescription`\"
    payload=$(
      jq --null-input \
        --arg tag "$TAG" \
        --arg name "$NAME" \
        --arg body "$description" \
        --argjson draft $DRAFTINESS \
        '{ tag_name: $tag, name: $name, body: $body, draft: $draft }'
    )

    response=$(
      ${cmd_modifier} curl  \
          -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: token $OAUTH_TOKEN" \
          --netrc \
          --location \
          --data "$payload" \
          "https://api.github.com/repos/${REPO}/releases"
    )

# TODO terminate script if this didn't work 
# TODO in dry run mode, the response is empty so everything from here on fails

    upload_url="$(echo "$response" | jq -r .upload_url | sed -e "s/{?name,label}//")"

    echo "binaries:" > example-index.yml

    ARTEFACT_DIRECTORY=../../artefacts  
    find $ARTEFACT_DIRECTORY -type f ! -iname '.*' | while read binary_path
    do
      binary_name=${binary_path##*/}
      binary_target=${binary_name#*.}

      sha=$(shasum "${binary_path}" | awk '{print $1}')
      
      upload_response=${cmd_modifier} curl --netrc \
            --header "Content-Type:application/gzip" \
            -H "Authorization: token $OAUTH_TOKEN" \
            --data-binary "@$binary_path" \
            "$upload_url?name=$binary_name"

      # Output suitable json for pasting into the cli plugin repo 
      echo "- checksum: ${sha}" >> example-index.yml
      echo "  platform: ${binary_target}" >> example-index.yml
      echo "  url: $GIT_URL/releases/download/$TAG/${binary_name}" >> example-index.yml

    done

    echo "----- The following would be suitable to paste into repo-index.yml -----"
    cat example-index.yml
    echo "---------"

popd

pushd prerelease/cf-blue-green-deploy
  git checkout master
  # Bump the stored version 
  ../../semver-tool/src/semver bump minor
  # Commit back the next version to source control (with an rc tag)
  ../../semver-tool/src/semver bump prerel rc1
  git add .version
  # Clear the stored release description 
  echo 'New release description here' > .releaseDescription
  # TODO it would be nice to fail the next release if this hasn't been updated
  git add .releaseDescription
  git commit -m "Auto release prep."
  ${cmd_modifier} git push
popd

